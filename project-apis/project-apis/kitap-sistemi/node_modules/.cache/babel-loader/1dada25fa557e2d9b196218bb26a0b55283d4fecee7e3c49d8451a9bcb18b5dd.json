{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.books, book => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"book\",\n      key: book.id\n    }, [_createElementVNode(\"h2\", null, _toDisplayString(book.title), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(book.authors.join(\", \")), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.viewDetails(book.id)\n    }, \"Detayları Gör\", 8 /* PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_renderList","$data","books","book","class","key","id","_createElementVNode","_toDisplayString","title","authors","join","onClick","$event","$options","viewDetails","_hoisted_1"],"sources":["C:\\Users\\bekir\\Desktop\\SoftwareEngineering\\project-apis\\kitap-sistemi\\src\\components\\BooksList.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div class=\"book\" v-for=\"book in books\" :key=\"book.id\">\r\n        <h2>{{ book.title }}</h2>\r\n        <p>{{ book.authors.join(\", \") }}</p>\r\n        <button @click=\"viewDetails(book.id)\">Detayları Gör</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: \"BooksList\",\r\n    data() {\r\n      return {\r\n        books: [],\r\n      };\r\n    },\r\n    created() {\r\n      this.fetchBooks();\r\n    },\r\n    methods: {\r\n  fetchBooks() {\r\n    fetch('https://www.googleapis.com/books/v1/volumes?q=subject:fiction')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // 'data.items' varsa kitapları işle\r\n        if (data.items) {\r\n          this.books = data.items.map(item => ({\r\n            id: item.id,\r\n            title: item.volumeInfo.title,\r\n            authors: item.volumeInfo.authors || [\"Yazar bulunamadı\"],\r\n            description: item.volumeInfo.description || \"Açıklama bulunamadı\",\r\n            image: item.volumeInfo.imageLinks ? item.volumeInfo.imageLinks.thumbnail : \"\",\r\n          }));\r\n        } else {\r\n          console.error('Kitaplar bulunamadı.');\r\n          this.books = [];  // Boş listeyi ayarla\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(\"API isteği hatası:\", error);\r\n        this.books = [];  // Hata durumunda boş listeyi ayarla\r\n      });\r\n  },\r\n  viewDetails(bookId) {\r\n    // Kitap detayına yönlendirme yap\r\n    this.$router.push({ name: 'BookDetails', params: { id: bookId } });\r\n  }\r\n}\r\n\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .book {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  button {\r\n    padding: 10px;\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #45a049;\r\n  }\r\n  </style>"],"mappings":";mBAAA;;uBACIA,mBAAA,CAMM,e,kBALJA,mBAAA,CAIMC,SAAA,QANZC,WAAA,CAEuCC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAA7BL,mBAAA,CAIM;MAJDM,KAAK,EAAC,MAAM;MAAwBC,GAAG,EAAEF,IAAI,CAACG;QACjDC,mBAAA,CAAyB,YAAAC,gBAAA,CAAlBL,IAAI,CAACM,KAAK,kBACjBF,mBAAA,CAAoC,WAAAC,gBAAA,CAA9BL,IAAI,CAACO,OAAO,CAACC,IAAI,wBACvBJ,mBAAA,CAA4D;MAAnDK,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW,CAACZ,IAAI,CAACG,EAAE;OAAG,eAAa,iBAL3DU,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}