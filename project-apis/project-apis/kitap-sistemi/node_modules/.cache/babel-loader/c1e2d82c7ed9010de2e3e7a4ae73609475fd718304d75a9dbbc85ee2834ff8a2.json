{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nexport default {\n  name: \"BooksList\",\n  data() {\n    return {\n      books: []\n    };\n  },\n  created() {\n    this.fetchBooks();\n  },\n  methods: {\n    fetchBooks() {\n      fetch('https://www.googleapis.com/books/v1/volumes?q=subject:fiction').then(response => response.json()).then(data => {\n        // API yanıtını kontrol et\n        console.log(data); // Yanıtı console'a yazdırarak kontrol edin\n\n        // Eğer 'data.items' bir dizi ise, map işlemini yap\n        if (Array.isArray(data.items)) {\n          this.books = data.items.map(item => ({\n            id: item.id,\n            title: item.volumeInfo.title,\n            authors: item.volumeInfo.authors || [\"Yazar bulunamadı\"],\n            description: item.volumeInfo.description || \"Açıklama bulunamadı\",\n            image: item.volumeInfo.imageLinks ? item.volumeInfo.imageLinks.thumbnail : \"\"\n          }));\n        } else {\n          console.error('API yanıtı beklenen formatta değil veya kitaplar bulunamadı.');\n          this.books = []; // Eğer format hatalıysa boş bir dizi ile işlemi bitir\n        }\n      }).catch(error => {\n        console.error(\"API isteği hatası:\", error);\n        this.books = []; // Hata durumunda boş listeyi ayarla\n      });\n    },\n    viewDetails(bookId) {\n      this.$router.push({\n        name: 'BookDetails',\n        params: {\n          id: bookId\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","books","created","fetchBooks","methods","fetch","then","response","json","console","log","Array","isArray","items","map","item","id","title","volumeInfo","authors","description","image","imageLinks","thumbnail","error","catch","viewDetails","bookId","$router","push","params"],"sources":["C:\\Users\\bekir\\Desktop\\SoftwareEngineering\\project-apis\\kitap-sistemi\\src\\components\\BooksList.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div class=\"book\" v-for=\"book in books\" :key=\"book.id\">\r\n        <h2>{{ book.title }}</h2>\r\n        <p>{{ book.authors.join(\", \") }}</p>\r\n        <button @click=\"viewDetails(book.id)\">Detayları Gör</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: \"BooksList\",\r\n    data() {\r\n      return {\r\n        books: [],\r\n      };\r\n    },\r\n    created() {\r\n      this.fetchBooks();\r\n    },\r\n    methods: {\r\n  fetchBooks() {\r\n    fetch('https://www.googleapis.com/books/v1/volumes?q=subject:fiction')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // API yanıtını kontrol et\r\n        console.log(data); // Yanıtı console'a yazdırarak kontrol edin\r\n\r\n        // Eğer 'data.items' bir dizi ise, map işlemini yap\r\n        if (Array.isArray(data.items)) {\r\n          this.books = data.items.map(item => ({\r\n            id: item.id,\r\n            title: item.volumeInfo.title,\r\n            authors: item.volumeInfo.authors || [\"Yazar bulunamadı\"],\r\n            description: item.volumeInfo.description || \"Açıklama bulunamadı\",\r\n            image: item.volumeInfo.imageLinks ? item.volumeInfo.imageLinks.thumbnail : \"\",\r\n          }));\r\n        } else {\r\n          console.error('API yanıtı beklenen formatta değil veya kitaplar bulunamadı.');\r\n          this.books = [];  // Eğer format hatalıysa boş bir dizi ile işlemi bitir\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(\"API isteği hatası:\", error);\r\n        this.books = [];  // Hata durumunda boş listeyi ayarla\r\n      });\r\n  },\r\n  viewDetails(bookId) {\r\n    this.$router.push({ name: 'BookDetails', params: { id: bookId } });\r\n  }\r\n}\r\n\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .book {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  button {\r\n    padding: 10px;\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #45a049;\r\n  }\r\n  </style>"],"mappings":";;AAWE,eAAe;EACbA,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACXD,UAAUA,CAAA,EAAG;MACXE,KAAK,CAAC,+DAA+D,EAClEC,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAACN,IAAG,IAAK;QACZ;QACAS,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC,EAAE;;QAEnB;QACA,IAAIW,KAAK,CAACC,OAAO,CAACZ,IAAI,CAACa,KAAK,CAAC,EAAE;UAC7B,IAAI,CAACZ,KAAI,GAAID,IAAI,CAACa,KAAK,CAACC,GAAG,CAACC,IAAG,KAAM;YACnCC,EAAE,EAAED,IAAI,CAACC,EAAE;YACXC,KAAK,EAAEF,IAAI,CAACG,UAAU,CAACD,KAAK;YAC5BE,OAAO,EAAEJ,IAAI,CAACG,UAAU,CAACC,OAAM,IAAK,CAAC,kBAAkB,CAAC;YACxDC,WAAW,EAAEL,IAAI,CAACG,UAAU,CAACE,WAAU,IAAK,qBAAqB;YACjEC,KAAK,EAAEN,IAAI,CAACG,UAAU,CAACI,UAAS,GAAIP,IAAI,CAACG,UAAU,CAACI,UAAU,CAACC,SAAQ,GAAI;UAC7E,CAAC,CAAC,CAAC;QACL,OAAO;UACLd,OAAO,CAACe,KAAK,CAAC,8DAA8D,CAAC;UAC7E,IAAI,CAACvB,KAAI,GAAI,EAAE,EAAG;QACpB;MACF,CAAC,EACAwB,KAAK,CAACD,KAAI,IAAK;QACdf,OAAO,CAACe,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C,IAAI,CAACvB,KAAI,GAAI,EAAE,EAAG;MACpB,CAAC,CAAC;IACN,CAAC;IACDyB,WAAWA,CAACC,MAAM,EAAE;MAClB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAE9B,IAAI,EAAE,aAAa;QAAE+B,MAAM,EAAE;UAAEd,EAAE,EAAEW;QAAO;MAAE,CAAC,CAAC;IACpE;EACF;AAEE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}