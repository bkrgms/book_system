{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2024 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nrequire(\"core-js/modules/es.set.difference.v2.js\");\nrequire(\"core-js/modules/es.set.intersection.v2.js\");\nrequire(\"core-js/modules/es.set.is-disjoint-from.v2.js\");\nrequire(\"core-js/modules/es.set.is-subset-of.v2.js\");\nrequire(\"core-js/modules/es.set.is-superset-of.v2.js\");\nrequire(\"core-js/modules/es.set.symmetric-difference.v2.js\");\nrequire(\"core-js/modules/es.set.union.v2.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileWatcherCertificateProvider = void 0;\nconst fs = require(\"fs\");\nconst logging = require(\"./logging\");\nconst constants_1 = require(\"./constants\");\nconst util_1 = require(\"util\");\nconst TRACER_NAME = 'certificate_provider';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst readFilePromise = (0, util_1.promisify)(fs.readFile);\nclass FileWatcherCertificateProvider {\n  constructor(config) {\n    this.config = config;\n    this.refreshTimer = null;\n    this.fileResultPromise = null;\n    this.latestCaUpdate = null;\n    this.caListeners = new Set();\n    this.latestIdentityUpdate = null;\n    this.identityListeners = new Set();\n    this.lastUpdateTime = null;\n    if (config.certificateFile === undefined !== (config.privateKeyFile === undefined)) {\n      throw new Error('certificateFile and privateKeyFile must be set or unset together');\n    }\n    if (config.certificateFile === undefined && config.caCertificateFile === undefined) {\n      throw new Error('At least one of certificateFile and caCertificateFile must be set');\n    }\n    trace('File watcher constructed with config ' + JSON.stringify(config));\n  }\n  updateCertificates() {\n    if (this.fileResultPromise) {\n      return;\n    }\n    this.fileResultPromise = Promise.allSettled([this.config.certificateFile ? readFilePromise(this.config.certificateFile) : Promise.reject(), this.config.privateKeyFile ? readFilePromise(this.config.privateKeyFile) : Promise.reject(), this.config.caCertificateFile ? readFilePromise(this.config.caCertificateFile) : Promise.reject()]);\n    this.fileResultPromise.then(([certificateResult, privateKeyResult, caCertificateResult]) => {\n      if (!this.refreshTimer) {\n        return;\n      }\n      trace('File watcher read certificates certificate' + (certificateResult ? '!=' : '==') + 'null, privateKey' + (privateKeyResult ? '!=' : '==') + 'null, CA certificate' + (caCertificateResult ? '!=' : '==') + 'null');\n      this.lastUpdateTime = new Date();\n      this.fileResultPromise = null;\n      if (certificateResult.status === 'fulfilled' && privateKeyResult.status === 'fulfilled') {\n        this.latestIdentityUpdate = {\n          certificate: certificateResult.value,\n          privateKey: privateKeyResult.value\n        };\n      } else {\n        this.latestIdentityUpdate = null;\n      }\n      if (caCertificateResult.status === 'fulfilled') {\n        this.latestCaUpdate = {\n          caCertificate: caCertificateResult.value\n        };\n      }\n      for (const listener of this.identityListeners) {\n        listener(this.latestIdentityUpdate);\n      }\n      for (const listener of this.caListeners) {\n        listener(this.latestCaUpdate);\n      }\n    });\n    trace('File watcher initiated certificate update');\n  }\n  maybeStartWatchingFiles() {\n    if (!this.refreshTimer) {\n      /* Perform the first read immediately, but only if there was not already\n       * a recent read, to avoid reading from the filesystem significantly more\n       * frequently than configured if the provider quickly switches between\n       * used and unused. */\n      const timeSinceLastUpdate = this.lastUpdateTime ? new Date().getTime() - this.lastUpdateTime.getTime() : Infinity;\n      if (timeSinceLastUpdate > this.config.refreshIntervalMs) {\n        this.updateCertificates();\n      }\n      if (timeSinceLastUpdate > this.config.refreshIntervalMs * 2) {\n        // Clear out old updates if they are definitely stale\n        this.latestCaUpdate = null;\n        this.latestIdentityUpdate = null;\n      }\n      this.refreshTimer = setInterval(() => this.updateCertificates(), this.config.refreshIntervalMs);\n      trace('File watcher started watching');\n    }\n  }\n  maybeStopWatchingFiles() {\n    if (this.caListeners.size === 0 && this.identityListeners.size === 0) {\n      this.fileResultPromise = null;\n      if (this.refreshTimer) {\n        clearInterval(this.refreshTimer);\n        this.refreshTimer = null;\n      }\n    }\n  }\n  addCaCertificateListener(listener) {\n    this.caListeners.add(listener);\n    this.maybeStartWatchingFiles();\n    process.nextTick(listener, this.latestCaUpdate);\n  }\n  removeCaCertificateListener(listener) {\n    this.caListeners.delete(listener);\n    this.maybeStopWatchingFiles();\n  }\n  addIdentityCertificateListener(listener) {\n    this.identityListeners.add(listener);\n    this.maybeStartWatchingFiles();\n    process.nextTick(listener, this.latestIdentityUpdate);\n  }\n  removeIdentityCertificateListener(listener) {\n    this.identityListeners.delete(listener);\n    this.maybeStopWatchingFiles();\n  }\n}\nexports.FileWatcherCertificateProvider = FileWatcherCertificateProvider;","map":{"version":3,"names":["require","fs","logging","constants_1","util_1","TRACER_NAME","trace","text","LogVerbosity","DEBUG","readFilePromise","promisify","readFile","FileWatcherCertificateProvider","constructor","config","refreshTimer","fileResultPromise","latestCaUpdate","caListeners","Set","latestIdentityUpdate","identityListeners","lastUpdateTime","certificateFile","undefined","privateKeyFile","Error","caCertificateFile","JSON","stringify","updateCertificates","Promise","allSettled","reject","then","certificateResult","privateKeyResult","caCertificateResult","Date","status","certificate","value","privateKey","caCertificate","listener","maybeStartWatchingFiles","timeSinceLastUpdate","getTime","Infinity","refreshIntervalMs","setInterval","maybeStopWatchingFiles","size","clearInterval","addCaCertificateListener","add","process","nextTick","removeCaCertificateListener","delete","addIdentityCertificateListener","removeIdentityCertificateListener","exports"],"sources":["../../src/certificate-provider.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}