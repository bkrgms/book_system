{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nrequire(\"core-js/modules/esnext.iterator.constructor.js\");\nrequire(\"core-js/modules/esnext.iterator.filter.js\");\nrequire(\"core-js/modules/esnext.iterator.map.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.RoundRobinLoadBalancer = void 0;\nconst load_balancer_1 = require(\"./load-balancer\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst picker_1 = require(\"./picker\");\nconst logging = require(\"./logging\");\nconst constants_1 = require(\"./constants\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst load_balancer_pick_first_1 = require(\"./load-balancer-pick-first\");\nconst TRACER_NAME = 'round_robin';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = 'round_robin';\nclass RoundRobinLoadBalancingConfig {\n  getLoadBalancerName() {\n    return TYPE_NAME;\n  }\n  constructor() {}\n  toJsonObject() {\n    return {\n      [TYPE_NAME]: {}\n    };\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static createFromJson(obj) {\n    return new RoundRobinLoadBalancingConfig();\n  }\n}\nclass RoundRobinPicker {\n  constructor(children, nextIndex = 0) {\n    this.children = children;\n    this.nextIndex = nextIndex;\n  }\n  pick(pickArgs) {\n    const childPicker = this.children[this.nextIndex].picker;\n    this.nextIndex = (this.nextIndex + 1) % this.children.length;\n    return childPicker.pick(pickArgs);\n  }\n  /**\n   * Check what the next subchannel returned would be. Used by the load\n   * balancer implementation to preserve this part of the picker state if\n   * possible when a subchannel connects or disconnects.\n   */\n  peekNextEndpoint() {\n    return this.children[this.nextIndex].endpoint;\n  }\n}\nclass RoundRobinLoadBalancer {\n  constructor(channelControlHelper, credentials, options) {\n    this.channelControlHelper = channelControlHelper;\n    this.credentials = credentials;\n    this.options = options;\n    this.children = [];\n    this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n    this.currentReadyPicker = null;\n    this.updatesPaused = false;\n    this.lastError = null;\n    this.childChannelControlHelper = (0, load_balancer_1.createChildChannelControlHelper)(channelControlHelper, {\n      updateState: (connectivityState, picker) => {\n        /* Ensure that name resolution is requested again after active\n         * connections are dropped. This is more aggressive than necessary to\n         * accomplish that, so we are counting on resolvers to have\n         * reasonable rate limits. */\n        if (this.currentState === connectivity_state_1.ConnectivityState.READY && connectivityState !== connectivity_state_1.ConnectivityState.READY) {\n          this.channelControlHelper.requestReresolution();\n        }\n        this.calculateAndUpdateState();\n      }\n    });\n  }\n  countChildrenWithState(state) {\n    return this.children.filter(child => child.getConnectivityState() === state).length;\n  }\n  calculateAndUpdateState() {\n    if (this.updatesPaused) {\n      return;\n    }\n    if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.READY) > 0) {\n      const readyChildren = this.children.filter(child => child.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);\n      let index = 0;\n      if (this.currentReadyPicker !== null) {\n        const nextPickedEndpoint = this.currentReadyPicker.peekNextEndpoint();\n        index = readyChildren.findIndex(child => (0, subchannel_address_1.endpointEqual)(child.getEndpoint(), nextPickedEndpoint));\n        if (index < 0) {\n          index = 0;\n        }\n      }\n      this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readyChildren.map(child => ({\n        endpoint: child.getEndpoint(),\n        picker: child.getPicker()\n      })), index));\n    } else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.CONNECTING) > 0) {\n      this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n    } else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) > 0) {\n      this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n        details: `No connection established. Last error: ${this.lastError}`\n      }));\n    } else {\n      this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n    }\n    /* round_robin should keep all children connected, this is how we do that.\n     * We can't do this more efficiently in the individual child's updateState\n     * callback because that doesn't have a reference to which child the state\n     * change is associated with. */\n    for (const child of this.children) {\n      if (child.getConnectivityState() === connectivity_state_1.ConnectivityState.IDLE) {\n        child.exitIdle();\n      }\n    }\n  }\n  updateState(newState, picker) {\n    trace(connectivity_state_1.ConnectivityState[this.currentState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n    if (newState === connectivity_state_1.ConnectivityState.READY) {\n      this.currentReadyPicker = picker;\n    } else {\n      this.currentReadyPicker = null;\n    }\n    this.currentState = newState;\n    this.channelControlHelper.updateState(newState, picker);\n  }\n  resetSubchannelList() {\n    for (const child of this.children) {\n      child.destroy();\n    }\n  }\n  updateAddressList(endpointList, lbConfig) {\n    this.resetSubchannelList();\n    trace('Connect to endpoint list ' + endpointList.map(subchannel_address_1.endpointToString));\n    this.updatesPaused = true;\n    this.children = endpointList.map(endpoint => new load_balancer_pick_first_1.LeafLoadBalancer(endpoint, this.childChannelControlHelper, this.credentials, this.options));\n    for (const child of this.children) {\n      child.startConnecting();\n    }\n    this.updatesPaused = false;\n    this.calculateAndUpdateState();\n  }\n  exitIdle() {\n    /* The round_robin LB policy is only in the IDLE state if it has no\n     * addresses to try to connect to and it has no picked subchannel.\n     * In that case, there is no meaningful action that can be taken here. */\n  }\n  resetBackoff() {\n    // This LB policy has no backoff to reset\n  }\n  destroy() {\n    this.resetSubchannelList();\n  }\n  getTypeName() {\n    return TYPE_NAME;\n  }\n}\nexports.RoundRobinLoadBalancer = RoundRobinLoadBalancer;\nfunction setup() {\n  (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);\n}\nexports.setup = setup;","map":{"version":3,"names":["require","load_balancer_1","connectivity_state_1","picker_1","logging","constants_1","subchannel_address_1","load_balancer_pick_first_1","TRACER_NAME","trace","text","LogVerbosity","DEBUG","TYPE_NAME","RoundRobinLoadBalancingConfig","getLoadBalancerName","constructor","toJsonObject","createFromJson","obj","RoundRobinPicker","children","nextIndex","pick","pickArgs","childPicker","picker","length","peekNextEndpoint","endpoint","RoundRobinLoadBalancer","channelControlHelper","credentials","options","currentState","ConnectivityState","IDLE","currentReadyPicker","updatesPaused","lastError","childChannelControlHelper","createChildChannelControlHelper","updateState","connectivityState","READY","requestReresolution","calculateAndUpdateState","countChildrenWithState","state","filter","child","getConnectivityState","readyChildren","index","nextPickedEndpoint","findIndex","endpointEqual","getEndpoint","map","getPicker","CONNECTING","QueuePicker","TRANSIENT_FAILURE","UnavailablePicker","details","exitIdle","newState","resetSubchannelList","destroy","updateAddressList","endpointList","lbConfig","endpointToString","LeafLoadBalancer","startConnecting","resetBackoff","getTypeName","exports","setup","registerLoadBalancerType"],"sources":["../../src/load-balancer-round-robin.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}