{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport axios from \"axios\";\nimport { getCurrentInstance } from 'vue';\nexport default {\n  setup() {\n    const {\n      on,\n      off\n    } = getCurrentInstance().appContext.config.globalProperties.emitter;\n    return {\n      on,\n      off\n    };\n  },\n  data() {\n    return {\n      books: [],\n      allBooks: [],\n      searchQuery: \"\",\n      currentPage: 1,\n      itemsPerPage: 20\n    };\n  },\n  computed: {\n    filteredBooks() {\n      const adminBooks = JSON.parse(localStorage.getItem('adminBooks')) || [];\n\n      // Sadece unique kitapları göster\n\n      const uniqueBooks = this.mergeBooks(this.allBooks, adminBooks);\n      const searchResults = uniqueBooks.filter(book => book.title.toLowerCase().includes(this.searchQuery.toLowerCase()) || book.author.toLowerCase().includes(this.searchQuery.toLowerCase()));\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return searchResults.slice(start, end);\n    },\n    totalPages() {\n      const adminBooks = JSON.parse(localStorage.getItem('adminBooks')) || [];\n      const uniqueBooks = this.mergeBooks(this.allBooks, adminBooks);\n      const searchResults = uniqueBooks.filter(book => book.title.toLowerCase().includes(this.searchQuery.toLowerCase()) || book.author.toLowerCase().includes(this.searchQuery.toLowerCase()));\n      return Math.ceil(searchResults.length / this.itemsPerPage);\n    }\n  },\n  methods: {\n    // Kitapları birleştiren ve tekrarları önleyen yeni method\n\n    mergeBooks(apiBooks, adminBooks) {\n      const allBooks = [...apiBooks];\n\n      // Admin kitaplarını kontrol et ve sadece yeni olanları ekle\n\n      adminBooks.forEach(adminBook => {\n        const exists = allBooks.some(book => book.id === adminBook.id || book.title === adminBook.title && book.author === adminBook.author);\n        if (!exists) {\n          allBooks.push(adminBook);\n        }\n      });\n      return allBooks;\n    },\n    async fetchBooks() {\n      try {\n        const response = await axios.get(\"https://www.googleapis.com/books/v1/volumes?q=classic+literature+OR+world+famous+books&maxResults=40\");\n        const rawBooks = response.data.items || [];\n\n        // API'den gelen kitapları işle\n\n        const apiBooks = rawBooks.filter(item => item.volumeInfo.imageLinks).slice(0, 34).map((item, index) => ({\n          id: `api_${index + 1}`,\n          // API kitapları için özel ID prefix'i\n\n          title: item.volumeInfo.title || \"Bilinmeyen Başlık\",\n          author: item.volumeInfo.authors ? item.volumeInfo.authors[0] : \"Bilinmeyen Yazar\",\n          image: item.volumeInfo.imageLinks.thumbnail\n        }));\n        this.allBooks = apiBooks;\n        this.books = apiBooks;\n      } catch (error) {\n        console.error(\"Kitaplar alınırken bir hata oluştu:\", error);\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    resetPagination() {\n      // Sayfa numarasını sıfırla\n\n      this.currentPage = 1;\n    },\n    logout() {\n      alert(\"Çıkış yapıldı.\");\n      this.$router.push(\"/\"); // Giriş sayfasına yönlendirme\n    },\n    // Kitapları yeniden yükleme metodu\n\n    refreshBooks() {\n      const adminBooks = JSON.parse(localStorage.getItem('adminBooks')) || [];\n      const uniqueBooks = this.mergeBooks(this.allBooks, adminBooks);\n      this.books = uniqueBooks;\n    }\n  },\n  watch: {\n    searchQuery() {\n      this.resetPagination(); // Arama değiştiğinde sayfa sıfırlanır\n    }\n  },\n  mounted() {\n    this.fetchBooks();\n\n    // Admin panelinden gelen güncellemeleri dinle\n\n    this.on('books-updated', () => {\n      this.refreshBooks();\n    });\n  },\n  unmounted() {\n    // Component unmount olduğunda event listener'ı temizle\n\n    this.off('books-updated');\n  }\n};","map":{"version":3,"names":["axios","getCurrentInstance","setup","on","off","appContext","config","globalProperties","emitter","data","books","allBooks","searchQuery","currentPage","itemsPerPage","computed","filteredBooks","adminBooks","JSON","parse","localStorage","getItem","uniqueBooks","mergeBooks","searchResults","filter","book","title","toLowerCase","includes","author","start","end","slice","totalPages","Math","ceil","length","methods","apiBooks","forEach","adminBook","exists","some","id","push","fetchBooks","response","get","rawBooks","items","item","volumeInfo","imageLinks","map","index","authors","image","thumbnail","error","console","prevPage","nextPage","resetPagination","logout","alert","$router","refreshBooks","watch","mounted","unmounted"],"sources":["C:\\Users\\bekir\\Desktop\\project-apis\\kitap-sistemi\\src\\views\\HomePage.vue"],"sourcesContent":["<template>\r\n\r\n  <div class=\"home-page\">\r\n\r\n    <!-- Navbar -->\r\n\r\n    <nav class=\"navbar\">\r\n\r\n      <span class=\"project-name\">Kitap Bul</span>\r\n\r\n      <input\r\n\r\n        v-model=\"searchQuery\"\r\n\r\n        type=\"text\"\r\n\r\n        placeholder=\"Kitap veya yazar ara...\"\r\n\r\n        class=\"search-input\"\r\n\r\n      />\r\n\r\n      <button class=\"logout-button\" @click=\"logout\">Çıkış Yap</button>\r\n\r\n    </nav>\r\n\r\n\r\n\r\n    <!-- Kitap Grid -->\r\n\r\n    <div class=\"book-grid-container\">\r\n\r\n      <div class=\"book-grid\">\r\n\r\n        <div\r\n\r\n          v-for=\"book in filteredBooks\"\r\n\r\n          :key=\"book.id\"\r\n\r\n          class=\"book-card\"\r\n\r\n        >\r\n\r\n          <div class=\"book-image\">\r\n\r\n            <img :src=\"book.image\" alt=\"Kitap Kapağı\" />\r\n\r\n          </div>\r\n\r\n          <div class=\"book-title\">{{ book.title }}</div>\r\n\r\n          <div class=\"book-author\">{{ book.author }}</div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n\r\n    <!-- Sayfalama -->\r\n\r\n    <div class=\"pagination\">\r\n\r\n      <button\r\n\r\n        class=\"page-button\"\r\n\r\n        :disabled=\"currentPage === 1\"\r\n\r\n        @click=\"prevPage\"\r\n\r\n      >\r\n\r\n        Önceki\r\n\r\n      </button>\r\n\r\n      <span>Sayfa {{ currentPage }} / {{ totalPages }}</span>\r\n\r\n      <button\r\n\r\n        class=\"page-button\"\r\n\r\n        :disabled=\"currentPage === totalPages\"\r\n\r\n        @click=\"nextPage\"\r\n\r\n      >\r\n\r\n        Sonraki\r\n\r\n      </button>\r\n\r\n    </div>\r\n\r\n  </div>\r\n\r\n</template>\r\n\r\n\r\n\r\n<script>\r\n\r\nimport axios from \"axios\";\r\n\r\nimport { getCurrentInstance } from 'vue';\r\n\r\n\r\n\r\nexport default {\r\n\r\n  setup() {\r\n\r\n    const { on, off } = getCurrentInstance().appContext.config.globalProperties.emitter;\r\n\r\n    return { on, off };\r\n\r\n  },\r\n\r\n  data() {\r\n\r\n    return {\r\n\r\n      books: [],\r\n\r\n      allBooks: [],\r\n\r\n      searchQuery: \"\",\r\n\r\n      currentPage: 1,\r\n\r\n      itemsPerPage: 20,\r\n\r\n    };\r\n\r\n  },\r\n\r\n  computed: {\r\n\r\n    filteredBooks() {\r\n\r\n      const adminBooks = JSON.parse(localStorage.getItem('adminBooks')) || [];\r\n\r\n      // Sadece unique kitapları göster\r\n\r\n      const uniqueBooks = this.mergeBooks(this.allBooks, adminBooks);\r\n\r\n      \r\n\r\n      const searchResults = uniqueBooks.filter(\r\n\r\n        (book) =>\r\n\r\n          book.title.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\r\n\r\n          book.author.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n\r\n      );\r\n\r\n\r\n\r\n      const start = (this.currentPage - 1) * this.itemsPerPage;\r\n\r\n      const end = start + this.itemsPerPage;\r\n\r\n      return searchResults.slice(start, end);\r\n\r\n    },\r\n\r\n    totalPages() {\r\n\r\n      const adminBooks = JSON.parse(localStorage.getItem('adminBooks')) || [];\r\n\r\n      const uniqueBooks = this.mergeBooks(this.allBooks, adminBooks);\r\n\r\n      \r\n\r\n      const searchResults = uniqueBooks.filter(\r\n\r\n        (book) =>\r\n\r\n          book.title.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\r\n\r\n          book.author.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n\r\n      );\r\n\r\n      return Math.ceil(searchResults.length / this.itemsPerPage);\r\n\r\n    },\r\n\r\n  },\r\n\r\n  methods: {\r\n\r\n    // Kitapları birleştiren ve tekrarları önleyen yeni method\r\n\r\n    mergeBooks(apiBooks, adminBooks) {\r\n\r\n      const allBooks = [...apiBooks];\r\n\r\n      \r\n\r\n      // Admin kitaplarını kontrol et ve sadece yeni olanları ekle\r\n\r\n      adminBooks.forEach(adminBook => {\r\n\r\n        const exists = allBooks.some(book => \r\n\r\n          book.id === adminBook.id || \r\n\r\n          (book.title === adminBook.title && book.author === adminBook.author)\r\n\r\n        );\r\n\r\n        \r\n\r\n        if (!exists) {\r\n\r\n          allBooks.push(adminBook);\r\n\r\n        }\r\n\r\n      });\r\n\r\n      \r\n\r\n      return allBooks;\r\n\r\n    },\r\n\r\n\r\n\r\n    async fetchBooks() {\r\n\r\n      try {\r\n\r\n        const response = await axios.get(\r\n\r\n          \"https://www.googleapis.com/books/v1/volumes?q=classic+literature+OR+world+famous+books&maxResults=40\"\r\n\r\n        );\r\n\r\n        const rawBooks = response.data.items || [];\r\n\r\n        \r\n\r\n        // API'den gelen kitapları işle\r\n\r\n        const apiBooks = rawBooks\r\n\r\n          .filter((item) => item.volumeInfo.imageLinks)\r\n\r\n          .slice(0, 34)\r\n\r\n          .map((item, index) => ({\r\n\r\n            id: `api_${index + 1}`, // API kitapları için özel ID prefix'i\r\n\r\n            title: item.volumeInfo.title || \"Bilinmeyen Başlık\",\r\n\r\n            author: item.volumeInfo.authors\r\n\r\n              ? item.volumeInfo.authors[0]\r\n\r\n              : \"Bilinmeyen Yazar\",\r\n\r\n            image: item.volumeInfo.imageLinks.thumbnail,\r\n\r\n          }));\r\n\r\n\r\n\r\n        this.allBooks = apiBooks;\r\n\r\n        this.books = apiBooks;\r\n\r\n      } catch (error) {\r\n\r\n        console.error(\"Kitaplar alınırken bir hata oluştu:\", error);\r\n\r\n      }\r\n\r\n    },\r\n\r\n    prevPage() {\r\n\r\n      if (this.currentPage > 1) {\r\n\r\n        this.currentPage--;\r\n\r\n      }\r\n\r\n    },\r\n\r\n    nextPage() {\r\n\r\n      if (this.currentPage < this.totalPages) {\r\n\r\n        this.currentPage++;\r\n\r\n      }\r\n\r\n    },\r\n\r\n    resetPagination() {\r\n\r\n      // Sayfa numarasını sıfırla\r\n\r\n      this.currentPage = 1;\r\n\r\n    },\r\n\r\n    logout() {\r\n\r\n      alert(\"Çıkış yapıldı.\");\r\n\r\n      this.$router.push(\"/\"); // Giriş sayfasına yönlendirme\r\n\r\n    },\r\n\r\n    // Kitapları yeniden yükleme metodu\r\n\r\n    refreshBooks() {\r\n\r\n      const adminBooks = JSON.parse(localStorage.getItem('adminBooks')) || [];\r\n\r\n      const uniqueBooks = this.mergeBooks(this.allBooks, adminBooks);\r\n\r\n      this.books = uniqueBooks;\r\n\r\n    }\r\n\r\n  },\r\n\r\n  watch: {\r\n\r\n    searchQuery() {\r\n\r\n      this.resetPagination(); // Arama değiştiğinde sayfa sıfırlanır\r\n\r\n    },\r\n\r\n  },\r\n\r\n  mounted() {\r\n\r\n    this.fetchBooks();\r\n\r\n    \r\n\r\n    // Admin panelinden gelen güncellemeleri dinle\r\n\r\n    this.on('books-updated', () => {\r\n\r\n      this.refreshBooks();\r\n\r\n    });\r\n\r\n  },\r\n\r\n  unmounted() {\r\n\r\n    // Component unmount olduğunda event listener'ı temizle\r\n\r\n    this.off('books-updated');\r\n\r\n  }\r\n\r\n};\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<style>\r\n\r\n.home-page {\r\n\r\n  font-family: Arial, sans-serif;\r\n\r\n  padding: 10px;\r\n\r\n}\r\n\r\n\r\n\r\n/* Navbar */\r\n\r\n.navbar {\r\n\r\n  display: flex;\r\n\r\n  justify-content: space-between;\r\n\r\n  align-items: center;\r\n\r\n  padding: 20px;\r\n\r\n  background-color: #f4f4f4;\r\n\r\n  border-bottom: 1px solid #ddd;\r\n\r\n}\r\n\r\n\r\n\r\n.project-name {\r\n\r\n  font-size: 24px;\r\n\r\n  font-weight: bold;\r\n\r\n}\r\n\r\n\r\n\r\n.search-input {\r\n\r\n  width: 400px;\r\n\r\n  padding: 10px 15px;\r\n\r\n  font-size: 18px;\r\n\r\n  border: 1px solid #ccc;\r\n\r\n  border-radius: 5px;\r\n\r\n}\r\n\r\n\r\n\r\n.logout-button {\r\n\r\n  padding: 10px 20px;\r\n\r\n  font-size: 16px;\r\n\r\n  background-color: #dc3545;\r\n\r\n  color: white;\r\n\r\n  border: none;\r\n\r\n  border-radius: 5px;\r\n\r\n  cursor: pointer;\r\n\r\n}\r\n\r\n\r\n\r\n/* Kitap Grid */\r\n\r\n.book-grid-container {\r\n\r\n  padding: 20px;\r\n\r\n  max-width: 1200px;\r\n\r\n  margin: 0 auto;\r\n\r\n}\r\n\r\n\r\n\r\n.book-grid {\r\n\r\n  display: grid;\r\n\r\n  grid-template-columns: repeat(5, 1fr);\r\n\r\n  gap: 20px;\r\n\r\n}\r\n\r\n\r\n\r\n.book-card {\r\n\r\n  background-color: #f9f9f9;\r\n\r\n  border: 1px solid #ddd;\r\n\r\n  border-radius: 5px;\r\n\r\n  text-align: center;\r\n\r\n  overflow: hidden;\r\n\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n\r\n}\r\n\r\n\r\n\r\n.book-card:hover {\r\n\r\n  transform: scale(1.05);\r\n\r\n  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);\r\n\r\n}\r\n\r\n\r\n\r\n.book-image {\r\n\r\n  height: 225px;\r\n\r\n  width: 150px;\r\n\r\n  margin: 0 auto;\r\n\r\n}\r\n\r\n\r\n\r\n.book-image img {\r\n\r\n  width: 100%;\r\n\r\n  height: 100%;\r\n\r\n  object-fit: cover;\r\n\r\n}\r\n\r\n\r\n\r\n.book-title {\r\n\r\n  font-size: 16px;\r\n\r\n  font-weight: bold;\r\n\r\n  padding: 5px 0;\r\n\r\n}\r\n\r\n\r\n\r\n.book-author {\r\n\r\n  font-size: 14px;\r\n\r\n  padding: 5px 0;\r\n\r\n  color: #555;\r\n\r\n}\r\n\r\n\r\n\r\n/* Sayfalama */\r\n\r\n.pagination {\r\n\r\n  display: flex;\r\n\r\n  justify-content: center;\r\n\r\n  align-items: center;\r\n\r\n  margin-top: 20px;\r\n\r\n}\r\n\r\n\r\n\r\n.page-button {\r\n\r\n  padding: 5px 15px;\r\n\r\n  margin: 0 10px;\r\n\r\n  font-size: 16px;\r\n\r\n  background-color: #007bff;\r\n\r\n  color: white;\r\n\r\n  border: none;\r\n\r\n  border-radius: 5px;\r\n\r\n}\r\n\r\n\r\n\r\n.page-button:disabled {\r\n\r\n  background-color: #ccc;\r\n\r\n}\r\n\r\n\r\n\r\n.page-button:hover:enabled {\r\n\r\n  background-color: #0056b3;\r\n\r\n}\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}