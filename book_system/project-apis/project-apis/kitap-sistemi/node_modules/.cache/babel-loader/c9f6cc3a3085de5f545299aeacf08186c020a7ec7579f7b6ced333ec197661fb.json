{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCertificateProviderChannelCredentials = exports.ChannelCredentials = void 0;\nconst tls_1 = require(\"tls\");\nconst call_credentials_1 = require(\"./call-credentials\");\nconst tls_helpers_1 = require(\"./tls-helpers\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n  if (obj && !(obj instanceof Buffer)) {\n    throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\n  }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */\nclass ChannelCredentials {\n  constructor(callCredentials) {\n    this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();\n  }\n  /**\n   * Gets the set of per-call credentials associated with this instance.\n   */\n  _getCallCredentials() {\n    return this.callCredentials;\n  }\n  _ref() {\n    // Do nothing by default\n  }\n  _unref() {\n    // Do nothing by default\n  }\n  /**\n   * Return a new ChannelCredentials instance with a given set of credentials.\n   * The resulting instance can be used to construct a Channel that communicates\n   * over TLS.\n   * @param rootCerts The root certificate data.\n   * @param privateKey The client certificate private key, if available.\n   * @param certChain The client certificate key chain, if available.\n   * @param verifyOptions Additional options to modify certificate verification\n   */\n  static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n    var _a;\n    verifyIsBufferOrNull(rootCerts, 'Root certificate');\n    verifyIsBufferOrNull(privateKey, 'Private key');\n    verifyIsBufferOrNull(certChain, 'Certificate chain');\n    if (privateKey && !certChain) {\n      throw new Error('Private key must be given with accompanying certificate chain');\n    }\n    if (!privateKey && certChain) {\n      throw new Error('Certificate chain must be given with accompanying private key');\n    }\n    const secureContext = (0, tls_1.createSecureContext)({\n      ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,\n      key: privateKey !== null && privateKey !== void 0 ? privateKey : undefined,\n      cert: certChain !== null && certChain !== void 0 ? certChain : undefined,\n      ciphers: tls_helpers_1.CIPHER_SUITES\n    });\n    return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n  }\n  /**\n   * Return a new ChannelCredentials instance with credentials created using\n   * the provided secureContext. The resulting instances can be used to\n   * construct a Channel that communicates over TLS. gRPC will not override\n   * anything in the provided secureContext, so the environment variables\n   * GRPC_SSL_CIPHER_SUITES and GRPC_DEFAULT_SSL_ROOTS_FILE_PATH will\n   * not be applied.\n   * @param secureContext The return value of tls.createSecureContext()\n   * @param verifyOptions Additional options to modify certificate verification\n   */\n  static createFromSecureContext(secureContext, verifyOptions) {\n    return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n  }\n  /**\n   * Return a new ChannelCredentials instance with no credentials.\n   */\n  static createInsecure() {\n    return new InsecureChannelCredentialsImpl();\n  }\n}\nexports.ChannelCredentials = ChannelCredentials;\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\n  constructor() {\n    super();\n  }\n  compose(callCredentials) {\n    throw new Error('Cannot compose insecure credentials');\n  }\n  _getConnectionOptions() {\n    return {};\n  }\n  _isSecure() {\n    return false;\n  }\n  _equals(other) {\n    return other instanceof InsecureChannelCredentialsImpl;\n  }\n}\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\n  constructor(secureContext, verifyOptions) {\n    super();\n    this.secureContext = secureContext;\n    this.verifyOptions = verifyOptions;\n    this.connectionOptions = {\n      secureContext\n    };\n    // Node asserts that this option is a function, so we cannot pass undefined\n    if (verifyOptions === null || verifyOptions === void 0 ? void 0 : verifyOptions.checkServerIdentity) {\n      this.connectionOptions.checkServerIdentity = verifyOptions.checkServerIdentity;\n    }\n    if ((verifyOptions === null || verifyOptions === void 0 ? void 0 : verifyOptions.rejectUnauthorized) !== undefined) {\n      this.connectionOptions.rejectUnauthorized = verifyOptions.rejectUnauthorized;\n    }\n  }\n  compose(callCredentials) {\n    const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n    return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);\n  }\n  _getConnectionOptions() {\n    // Copy to prevent callers from mutating this.connectionOptions\n    return Object.assign({}, this.connectionOptions);\n  }\n  _isSecure() {\n    return true;\n  }\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof SecureChannelCredentialsImpl) {\n      return this.secureContext === other.secureContext && this.verifyOptions.checkServerIdentity === other.verifyOptions.checkServerIdentity;\n    } else {\n      return false;\n    }\n  }\n}\nclass CertificateProviderChannelCredentialsImpl extends ChannelCredentials {\n  constructor(caCertificateProvider, identityCertificateProvider, verifyOptions) {\n    super();\n    this.caCertificateProvider = caCertificateProvider;\n    this.identityCertificateProvider = identityCertificateProvider;\n    this.verifyOptions = verifyOptions;\n    this.refcount = 0;\n    this.latestCaUpdate = null;\n    this.latestIdentityUpdate = null;\n    this.caCertificateUpdateListener = this.handleCaCertificateUpdate.bind(this);\n    this.identityCertificateUpdateListener = this.handleIdentityCertitificateUpdate.bind(this);\n  }\n  compose(callCredentials) {\n    const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n    return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);\n  }\n  _getConnectionOptions() {\n    var _a, _b, _c;\n    if (this.latestCaUpdate === null) {\n      return null;\n    }\n    if (this.identityCertificateProvider !== null && this.latestIdentityUpdate === null) {\n      return null;\n    }\n    const secureContext = (0, tls_1.createSecureContext)({\n      ca: this.latestCaUpdate.caCertificate,\n      key: (_a = this.latestIdentityUpdate) === null || _a === void 0 ? void 0 : _a.privateKey,\n      cert: (_b = this.latestIdentityUpdate) === null || _b === void 0 ? void 0 : _b.certificate,\n      ciphers: tls_helpers_1.CIPHER_SUITES\n    });\n    const options = {\n      secureContext: secureContext\n    };\n    if ((_c = this.verifyOptions) === null || _c === void 0 ? void 0 : _c.checkServerIdentity) {\n      options.checkServerIdentity = this.verifyOptions.checkServerIdentity;\n    }\n    return options;\n  }\n  _isSecure() {\n    return true;\n  }\n  _equals(other) {\n    var _a, _b;\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof CertificateProviderChannelCredentialsImpl) {\n      return this.caCertificateProvider === other.caCertificateProvider && this.identityCertificateProvider === other.identityCertificateProvider && ((_a = this.verifyOptions) === null || _a === void 0 ? void 0 : _a.checkServerIdentity) === ((_b = other.verifyOptions) === null || _b === void 0 ? void 0 : _b.checkServerIdentity);\n    } else {\n      return false;\n    }\n  }\n  _ref() {\n    var _a;\n    if (this.refcount === 0) {\n      this.caCertificateProvider.addCaCertificateListener(this.caCertificateUpdateListener);\n      (_a = this.identityCertificateProvider) === null || _a === void 0 ? void 0 : _a.addIdentityCertificateListener(this.identityCertificateUpdateListener);\n    }\n    this.refcount += 1;\n  }\n  _unref() {\n    var _a;\n    this.refcount -= 1;\n    if (this.refcount === 0) {\n      this.caCertificateProvider.removeCaCertificateListener(this.caCertificateUpdateListener);\n      (_a = this.identityCertificateProvider) === null || _a === void 0 ? void 0 : _a.removeIdentityCertificateListener(this.identityCertificateUpdateListener);\n    }\n  }\n  handleCaCertificateUpdate(update) {\n    this.latestCaUpdate = update;\n  }\n  handleIdentityCertitificateUpdate(update) {\n    this.latestIdentityUpdate = update;\n  }\n}\nfunction createCertificateProviderChannelCredentials(caCertificateProvider, identityCertificateProvider, verifyOptions) {\n  return new CertificateProviderChannelCredentialsImpl(caCertificateProvider, identityCertificateProvider, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : null);\n}\nexports.createCertificateProviderChannelCredentials = createCertificateProviderChannelCredentials;\nclass ComposedChannelCredentialsImpl extends ChannelCredentials {\n  constructor(channelCredentials, callCreds) {\n    super(callCreds);\n    this.channelCredentials = channelCredentials;\n    if (!channelCredentials._isSecure()) {\n      throw new Error('Cannot compose insecure credentials');\n    }\n  }\n  compose(callCredentials) {\n    const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n    return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);\n  }\n  _getConnectionOptions() {\n    return this.channelCredentials._getConnectionOptions();\n  }\n  _isSecure() {\n    return true;\n  }\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof ComposedChannelCredentialsImpl) {\n      return this.channelCredentials._equals(other.channelCredentials) && this.callCredentials._equals(other.callCredentials);\n    } else {\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["tls_1","require","call_credentials_1","tls_helpers_1","verifyIsBufferOrNull","obj","friendlyName","Buffer","TypeError","ChannelCredentials","constructor","callCredentials","CallCredentials","createEmpty","_getCallCredentials","_ref","_unref","createSsl","rootCerts","privateKey","certChain","verifyOptions","Error","secureContext","createSecureContext","ca","_a","getDefaultRootsData","undefined","key","cert","ciphers","CIPHER_SUITES","SecureChannelCredentialsImpl","createFromSecureContext","createInsecure","InsecureChannelCredentialsImpl","exports","compose","_getConnectionOptions","_isSecure","_equals","other","connectionOptions","checkServerIdentity","rejectUnauthorized","combinedCallCredentials","ComposedChannelCredentialsImpl","Object","assign","CertificateProviderChannelCredentialsImpl","caCertificateProvider","identityCertificateProvider","refcount","latestCaUpdate","latestIdentityUpdate","caCertificateUpdateListener","handleCaCertificateUpdate","bind","identityCertificateUpdateListener","handleIdentityCertitificateUpdate","caCertificate","_b","certificate","options","_c","addCaCertificateListener","addIdentityCertificateListener","removeCaCertificateListener","removeIdentityCertificateListener","update","createCertificateProviderChannelCredentials","channelCredentials","callCreds"],"sources":["../../src/channel-credentials.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAiBA,MAAAA,KAAA,GAAAC,OAAA;AAOA,MAAAC,kBAAA,GAAAD,OAAA;AACA,MAAAE,aAAA,GAAAF,OAAA;AAGA;AACA,SAASG,oBAAoBA,CAACC,GAAQ,EAAEC,YAAoB;EAC1D,IAAID,GAAG,IAAI,EAAEA,GAAG,YAAYE,MAAM,CAAC,EAAE;IACnC,MAAM,IAAIC,SAAS,CAAC,GAAGF,YAAY,kCAAkC,CAAC;EACxE;AACF;AA0BA;;;;;AAKA,MAAsBG,kBAAkB;EAGtCC,YAAsBC,eAAiC;IACrD,IAAI,CAACA,eAAe,GAAGA,eAAe,IAAIT,kBAAA,CAAAU,eAAe,CAACC,WAAW,EAAE;EACzE;EASA;;;EAGAC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACH,eAAe;EAC7B;EAqBAI,IAAIA,CAAA;IACF;EAAA;EAGFC,MAAMA,CAAA;IACJ;EAAA;EAGF;;;;;;;;;EASA,OAAOC,SAASA,CACdC,SAAyB,EACzBC,UAA0B,EAC1BC,SAAyB,EACzBC,aAA6B;;IAE7BjB,oBAAoB,CAACc,SAAS,EAAE,kBAAkB,CAAC;IACnDd,oBAAoB,CAACe,UAAU,EAAE,aAAa,CAAC;IAC/Cf,oBAAoB,CAACgB,SAAS,EAAE,mBAAmB,CAAC;IACpD,IAAID,UAAU,IAAI,CAACC,SAAS,EAAE;MAC5B,MAAM,IAAIE,KAAK,CACb,+DAA+D,CAChE;IACH;IACA,IAAI,CAACH,UAAU,IAAIC,SAAS,EAAE;MAC5B,MAAM,IAAIE,KAAK,CACb,+DAA+D,CAChE;IACH;IACA,MAAMC,aAAa,GAAG,IAAAvB,KAAA,CAAAwB,mBAAmB,EAAC;MACxCC,EAAE,EAAE,CAAAC,EAAA,GAAAR,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAAf,aAAA,CAAAwB,mBAAmB,GAAE,cAAAD,EAAA,cAAAA,EAAA,GAAIE,SAAS;MACnDC,GAAG,EAAEV,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAIS,SAAS;MAC5BE,IAAI,EAAEV,SAAS,aAATA,SAAS,cAATA,SAAS,GAAIQ,SAAS;MAC5BG,OAAO,EAAE5B,aAAA,CAAA6B;KACV,CAAC;IACF,OAAO,IAAIC,4BAA4B,CAACV,aAAa,EAAEF,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAI,EAAE,CAAC;EAC7E;EAEA;;;;;;;;;;EAUA,OAAOa,uBAAuBA,CAC5BX,aAA4B,EAC5BF,aAA6B;IAE7B,OAAO,IAAIY,4BAA4B,CAACV,aAAa,EAAEF,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAI,EAAE,CAAC;EAC7E;EAEA;;;EAGA,OAAOc,cAAcA,CAAA;IACnB,OAAO,IAAIC,8BAA8B,EAAE;EAC7C;;AA3GFC,OAAA,CAAA5B,kBAAA,GAAAA,kBAAA;AA8GA,MAAM2B,8BAA+B,SAAQ3B,kBAAkB;EAC7DC,YAAA;IACE,KAAK,EAAE;EACT;EAEA4B,OAAOA,CAAC3B,eAAgC;IACtC,MAAM,IAAIW,KAAK,CAAC,qCAAqC,CAAC;EACxD;EAEAiB,qBAAqBA,CAAA;IACnB,OAAO,EAAE;EACX;EACAC,SAASA,CAAA;IACP,OAAO,KAAK;EACd;EACAC,OAAOA,CAACC,KAAyB;IAC/B,OAAOA,KAAK,YAAYN,8BAA8B;EACxD;;AAGF,MAAMH,4BAA6B,SAAQxB,kBAAkB;EAG3DC,YACUa,aAA4B,EAC5BF,aAA4B;IAEpC,KAAK,EAAE;IAHC,KAAAE,aAAa,GAAbA,aAAa;IACb,KAAAF,aAAa,GAAbA,aAAa;IAGrB,IAAI,CAACsB,iBAAiB,GAAG;MACvBpB;KACD;IACD;IACA,IAAIF,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEuB,mBAAmB,EAAE;MACtC,IAAI,CAACD,iBAAiB,CAACC,mBAAmB,GACxCvB,aAAa,CAACuB,mBAAmB;IACrC;IAEA,IAAI,CAAAvB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEwB,kBAAkB,MAAKjB,SAAS,EAAE;MACnD,IAAI,CAACe,iBAAiB,CAACE,kBAAkB,GACvCxB,aAAa,CAACwB,kBAAkB;IACpC;EACF;EAEAP,OAAOA,CAAC3B,eAAgC;IACtC,MAAMmC,uBAAuB,GAC3B,IAAI,CAACnC,eAAe,CAAC2B,OAAO,CAAC3B,eAAe,CAAC;IAC/C,OAAO,IAAIoC,8BAA8B,CAAC,IAAI,EAAED,uBAAuB,CAAC;EAC1E;EAEAP,qBAAqBA,CAAA;IACnB;IACA,OAAAS,MAAA,CAAAC,MAAA,KAAY,IAAI,CAACN,iBAAiB;EACpC;EACAH,SAASA,CAAA;IACP,OAAO,IAAI;EACb;EACAC,OAAOA,CAACC,KAAyB;IAC/B,IAAI,IAAI,KAAKA,KAAK,EAAE;MAClB,OAAO,IAAI;IACb;IACA,IAAIA,KAAK,YAAYT,4BAA4B,EAAE;MACjD,OACE,IAAI,CAACV,aAAa,KAAKmB,KAAK,CAACnB,aAAa,IAC1C,IAAI,CAACF,aAAa,CAACuB,mBAAmB,KACpCF,KAAK,CAACrB,aAAa,CAACuB,mBAAmB;IAE7C,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF;;AAGF,MAAMM,yCAA0C,SAAQzC,kBAAkB;EAMxEC,YACUyC,qBAA0C,EAC1CC,2BAAuD,EACvD/B,aAAmC;IAE3C,KAAK,EAAE;IAJC,KAAA8B,qBAAqB,GAArBA,qBAAqB;IACrB,KAAAC,2BAA2B,GAA3BA,2BAA2B;IAC3B,KAAA/B,aAAa,GAAbA,aAAa;IARf,KAAAgC,QAAQ,GAAW,CAAC;IACpB,KAAAC,cAAc,GAA+B,IAAI;IACjD,KAAAC,oBAAoB,GAAqC,IAAI;IAC7D,KAAAC,2BAA2B,GAAgC,IAAI,CAACC,yBAAyB,CAACC,IAAI,CAAC,IAAI,CAAC;IACpG,KAAAC,iCAAiC,GAAsC,IAAI,CAACC,iCAAiC,CAACF,IAAI,CAAC,IAAI,CAAC;EAOhI;EACApB,OAAOA,CAAC3B,eAAgC;IACtC,MAAMmC,uBAAuB,GAC3B,IAAI,CAACnC,eAAe,CAAC2B,OAAO,CAAC3B,eAAe,CAAC;IAC/C,OAAO,IAAIoC,8BAA8B,CACvC,IAAI,EACJD,uBAAuB,CACxB;EACH;EACAP,qBAAqBA,CAAA;;IACnB,IAAI,IAAI,CAACe,cAAc,KAAK,IAAI,EAAE;MAChC,OAAO,IAAI;IACb;IACA,IAAI,IAAI,CAACF,2BAA2B,KAAK,IAAI,IAAI,IAAI,CAACG,oBAAoB,KAAK,IAAI,EAAE;MACnF,OAAO,IAAI;IACb;IACA,MAAMhC,aAAa,GAAkB,IAAAvB,KAAA,CAAAwB,mBAAmB,EAAC;MACvDC,EAAE,EAAE,IAAI,CAAC6B,cAAc,CAACO,aAAa;MACrChC,GAAG,EAAE,CAAAH,EAAA,OAAI,CAAC6B,oBAAoB,cAAA7B,EAAA,uBAAAA,EAAA,CAAEP,UAAU;MAC1CW,IAAI,EAAE,CAAAgC,EAAA,OAAI,CAACP,oBAAoB,cAAAO,EAAA,uBAAAA,EAAA,CAAEC,WAAW;MAC5ChC,OAAO,EAAE5B,aAAA,CAAA6B;KACV,CAAC;IACF,MAAMgC,OAAO,GAAsB;MACjCzC,aAAa,EAAEA;KAChB;IACD,IAAI,CAAA0C,EAAA,OAAI,CAAC5C,aAAa,cAAA4C,EAAA,uBAAAA,EAAA,CAAErB,mBAAmB,EAAE;MAC3CoB,OAAO,CAACpB,mBAAmB,GAAG,IAAI,CAACvB,aAAa,CAACuB,mBAAmB;IACtE;IACA,OAAOoB,OAAO;EAChB;EACAxB,SAASA,CAAA;IACP,OAAO,IAAI;EACb;EACAC,OAAOA,CAACC,KAAyB;;IAC/B,IAAI,IAAI,KAAKA,KAAK,EAAE;MAClB,OAAO,IAAI;IACb;IACA,IAAIA,KAAK,YAAYQ,yCAAyC,EAAE;MAC9D,OAAO,IAAI,CAACC,qBAAqB,KAAKT,KAAK,CAACS,qBAAqB,IAC/D,IAAI,CAACC,2BAA2B,KAAKV,KAAK,CAACU,2BAA2B,IACtE,EAAA1B,EAAA,OAAI,CAACL,aAAa,cAAAK,EAAA,uBAAAA,EAAA,CAAEkB,mBAAmB,OAAK,CAAAkB,EAAA,GAAApB,KAAK,CAACrB,aAAa,cAAAyC,EAAA,uBAAAA,EAAA,CAAElB,mBAAmB;IACxF,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF;EACA7B,IAAIA,CAAA;;IACF,IAAI,IAAI,CAACsC,QAAQ,KAAK,CAAC,EAAE;MACvB,IAAI,CAACF,qBAAqB,CAACe,wBAAwB,CAAC,IAAI,CAACV,2BAA2B,CAAC;MACrF,CAAA9B,EAAA,OAAI,CAAC0B,2BAA2B,cAAA1B,EAAA,uBAAAA,EAAA,CAAEyC,8BAA8B,CAAC,IAAI,CAACR,iCAAiC,CAAC;IAC1G;IACA,IAAI,CAACN,QAAQ,IAAI,CAAC;EACpB;EACArC,MAAMA,CAAA;;IACJ,IAAI,CAACqC,QAAQ,IAAI,CAAC;IAClB,IAAI,IAAI,CAACA,QAAQ,KAAK,CAAC,EAAE;MACvB,IAAI,CAACF,qBAAqB,CAACiB,2BAA2B,CAAC,IAAI,CAACZ,2BAA2B,CAAC;MACxF,CAAA9B,EAAA,OAAI,CAAC0B,2BAA2B,cAAA1B,EAAA,uBAAAA,EAAA,CAAE2C,iCAAiC,CAAC,IAAI,CAACV,iCAAiC,CAAC;IAC7G;EACF;EAEQF,yBAAyBA,CAACa,MAAkC;IAClE,IAAI,CAAChB,cAAc,GAAGgB,MAAM;EAC9B;EAEQV,iCAAiCA,CAACU,MAAwC;IAChF,IAAI,CAACf,oBAAoB,GAAGe,MAAM;EACpC;;AAGF,SAAgBC,2CAA2CA,CAACpB,qBAA0C,EAAEC,2BAAuD,EAAE/B,aAA6B;EAC5L,OAAO,IAAI6B,yCAAyC,CAACC,qBAAqB,EAAEC,2BAA2B,EAAE/B,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAI,IAAI,CAAC;AACjI;AAFAgB,OAAA,CAAAkC,2CAAA,GAAAA,2CAAA;AAIA,MAAMxB,8BAA+B,SAAQtC,kBAAkB;EAC7DC,YACU8D,kBAAsC,EAC9CC,SAA0B;IAE1B,KAAK,CAACA,SAAS,CAAC;IAHR,KAAAD,kBAAkB,GAAlBA,kBAAkB;IAI1B,IAAI,CAACA,kBAAkB,CAAChC,SAAS,EAAE,EAAE;MACnC,MAAM,IAAIlB,KAAK,CAAC,qCAAqC,CAAC;IACxD;EACF;EACAgB,OAAOA,CAAC3B,eAAgC;IACtC,MAAMmC,uBAAuB,GAC3B,IAAI,CAACnC,eAAe,CAAC2B,OAAO,CAAC3B,eAAe,CAAC;IAC/C,OAAO,IAAIoC,8BAA8B,CACvC,IAAI,CAACyB,kBAAkB,EACvB1B,uBAAuB,CACxB;EACH;EAEAP,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACiC,kBAAkB,CAACjC,qBAAqB,EAAE;EACxD;EACAC,SAASA,CAAA;IACP,OAAO,IAAI;EACb;EACAC,OAAOA,CAACC,KAAyB;IAC/B,IAAI,IAAI,KAAKA,KAAK,EAAE;MAClB,OAAO,IAAI;IACb;IACA,IAAIA,KAAK,YAAYK,8BAA8B,EAAE;MACnD,OACE,IAAI,CAACyB,kBAAkB,CAAC/B,OAAO,CAACC,KAAK,CAAC8B,kBAAkB,CAAC,IACzD,IAAI,CAAC7D,eAAe,CAAC8B,OAAO,CAACC,KAAK,CAAC/B,eAAe,CAAC;IAEvD,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}